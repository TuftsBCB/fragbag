package bow

import (
	"fmt"
	"log"
	"os"
	"testing"

	"github.com/TuftsBCB/fragbag"
)

var (
	libpath = "../data/fraglibs/centers400_11.brk"

	library  fragbag.Library
	oldstyle []string
	newstyle []Bow
)

func newBowMap(size int, mfreqs map[int]float32) Bow {
	b := NewBow(size)
	for fragNum, freq := range mfreqs {
		b.Freqs[fragNum] = freq
	}
	return b
}

func init() {
	var err error
	var flib *os.File

	flib_path := os.Getenv("FRAGLIB_PATH")
	if len(flib_path) == 0 {
		log.Fatal("Environment variable FRAGLIB_PATH must be set.")
	}

	flib, err = os.Open(fmt.Sprintf("%s/structure/400-11.json", flib_path))
	if err != nil {
		log.Fatal(err)
	}

	library, err = fragbag.Open(flib)
	if err != nil {
		log.Fatal(err)
	}

	oldstyle = []string{
		"aaaaa",
		"126#258#386#",
		"abcdefYZ#52#53#54#abcdef",
	}
	newstyle = []Bow{
		newBowMap(library.Size(), map[int]float32{0: 5}),
		newBowMap(library.Size(), map[int]float32{
			126: 1, 258: 1, 386: 1,
		}),
		newBowMap(library.Size(), map[int]float32{
			0: 2, 1: 2, 2: 2, 3: 2, 4: 2, 5: 2,
			50: 1, 51: 1, 52: 1, 53: 1, 54: 1,
		}),
	}
}

func TestOldStyleRead(t *testing.T) {
	for i, test := range oldstyle {
		oldBow, err := NewOldStyleBow(library.Size(), test)
		if err != nil {
			t.Fatalf("The old style string '%s' could not be parsed: %s",
				test, err)
		}
		if !oldBow.Equal(newstyle[i]) {
			t.Fatalf("The BOW '%s' generated by '%s' is not equivalent to "+
				"'%s'.", oldBow, test, newstyle[i])
		}
	}
}

func TestOldStyleWrite(t *testing.T) {
	for i, test := range newstyle {
		oldStr := test.StringOldStyle()
		oldBow, err := NewOldStyleBow(library.Size(), oldStr)
		if err != nil {
			t.Fatalf("The old style string '%s' could not be parsed: %s",
				oldStr, err)
		}
		if !oldBow.Equal(test) {
			t.Fatalf("The old style string '%s' generated by '%s' is not "+
				"equivalent to '%s'.", oldStr, test, newstyle[i])
		}
	}
}
